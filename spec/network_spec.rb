# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by chef-codegen and manual
#     changes will be clobbered when the file is regenerated.
#
# ----------------------------------------------------------------------------

require 'spec_helper'
# Test Matrix:
#
# +--------------------------------------------------------+
# | Action  | Exists | Changes | Success | Result          |
# +--------------------------------------------------------+
# | create  | Y      | Y       | Y       | Edit            |
# | create  | Y      | Y       | N       | Fail            |
# | create  | Y      | N       | Y       | Fetch (no-op)   |
# | create  | Y      | N       | N       | Fail            |
# | create  | N      | Y       | Y       | Create          |
# | create  | N      | Y       | N       | Fail            |
# +--------------------------------------------------------+
# | delete  | Y      | Y       | Y       | Delete          |
# | delete  | Y      | Y       | N       | Fail            |
# | delete  | N      | Y       | Y       | Fail (no delete)|
# | delete  | N      | Y       | N       | Fail            |
# +--------------------------------------------------------+
# TODO(alexstephen): Add tests for manage
# TODO(alexstephen): Add tests for modify
describe 'gcompute::tests~network~create~exist~change' do
  # TODO(alexstephen): Create test for create | exist | change | success
  # Test for updating an object
end

describe 'gcompute::tests~network~create~exist~change~fail' do
  # TODO(alexstephen): Create test for create | exist | change | fail
  subject { -> { raise '[placeholder] This should fail.' } }

  it { is_expected.to raise_error(RuntimeError, /placeholder/) }
end

describe 'gcompute::tests~network~create~exist~nochange' do
  # TODO(alexstephen): Create test for create | exist | nochange | success
  # Test for creating same object again
end

describe 'gcompute::tests~network~create~exist~nochange~fail' do
  # TODO(alexstephen): Create test for create | exist | nochange | fail
  subject { -> { raise '[placeholder] This should fail.' } }

  it { is_expected.to raise_error(RuntimeError, /placeholder/) }
end

describe 'gcompute::tests~network~create~noexist~change' do
  # TODO(alexstephen): Create test for create | noexist | change | success
  # Test for creating an object
end

describe 'gcompute::tests~network~create~noexist~change~fail' do
  # TODO(alexstephen): Create test for create | noexist | change | fail
  subject { -> { raise '[placeholder] This should fail.' } }

  it { is_expected.to raise_error(RuntimeError, /placeholder/) }
end

describe 'gcompute::tests~network~delete~exist~change' do
  # TODO(alexstephen): Create test for delete | exists | changed | success
  # Test for deleting an object
end

describe 'gcompute::tests~network~delete~exist~change~fail' do
  # TODO(alexstephen): Create test for delete | exists | changed | fail
  subject { -> { raise '[placeholder] This should fail.' } }

  it { is_expected.to raise_error(RuntimeError, /placeholder/) }
end

describe 'gcompute::tests~network~delete~noexist~change' do
  # TODO(alexstephen): Create test for delete | noexists | changed | success
  # Test for deleting an object that doesn't exist, throws error
  subject { -> { raise '[placeholder] This should fail.' } }

  it { is_expected.to raise_error(RuntimeError, /placeholder/) }
end

describe 'gcompute::tests~network~delete~noexist~change~fail' do
  # TODO(alexstephen): Create test for delete | noexists | changed | fail
  subject { -> { raise '[placeholder] This should fail.' } }

  it { is_expected.to raise_error(RuntimeError, /placeholder/) }
end

def expect_network_get_success(id, data = {})
  id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
  body = load_network_result("success#{id}~#{id_data}.yaml").to_json

  request = double('request')
  allow(request).to receive(:send).and_return(http_success(body))

  expect(Google::Request::Get).to receive(:new)
    .with(self_link(uri_data(id).merge(data)),
          instance_of(Google::FakeCredential)) do |args|
    debug ">> GET #{args}"
    request
  end
end

def http_success(body)
  response = Net::HTTPOK.new(1.0, 200, 'OK')
  response.body = body
  response.instance_variable_set(:@read, true)
  response
end

def expect_network_get_async(id)
  body = { kind: 'compute#network' }.to_json

  request = double('request')
  allow(request).to receive(:send).and_return(http_success(body))

  expect(Google::Request::Get).to receive(:new)
    .with(self_link(uri_data(id)),
          instance_of(Google::FakeCredential)) do |args|
    debug ">> GET <async> #{args}"
    request
  end
end

def expect_network_get_failed(id, data = {})
  request = double('request')
  allow(request).to receive(:send).and_return(http_failed_object_missing)

  expect(Google::Request::Get).to receive(:new)
    .with(self_link(uri_data(id).merge(data)),
          instance_of(Google::FakeCredential)) do |args|
    debug ">> GET [failed] #{args}"
    request
  end
end

def http_failed_object_missing
  Net::HTTPNotFound.new(1.0, 404, 'Not Found')
end

def expect_network_create(id, expected_body, data = {})
  body = { kind: 'compute#operation',
           status: 'DONE',
           targetLink: self_link(uri_data(id)) }.to_json

  request = double('request')
  allow(request).to receive(:send).and_return(http_success(body))

  expect(Google::Request::Post).to receive(:new)
    .with(collection(uri_data(id).merge(data)),
          instance_of(Google::FakeCredential),
          'application/json', expected_body.to_json) do |args|
    debug ">> POST #{args} = body(#{body})"
    request
  end
end

def expect_network_delete(id, name = nil)
  delete_data = uri_data(id)
  delete_data[:name] = name unless name.nil?
  body = { kind: 'compute#operation',
           status: 'DONE',
           targetLink: self_link(uri_data(id)) }.to_json

  request = double('request')
  allow(request).to receive(:send).and_return(http_success(body))

  expect(Google::Request::Delete).to receive(:new)
    .with(self_link(delete_data),
          instance_of(Google::FakeCredential)) do |args|
    debug ">> DELETE #{args}"
    request
  end
end

def load_network_result(file)
  results = File.join(File.dirname(__FILE__), 'data', 'network',
                      'gcompute_network', file)
  raise "Network result data file #{results}" unless File.exist?(results)
  data = YAML.safe_load(File.read(results))
  raise "Invalid network results #{results}" unless data.class <= Hash
  data
end

def debug(message)
  puts(message) if ENV['RSPEC_DEBUG']
end
