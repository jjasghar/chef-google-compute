# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by chef-codegen and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'spec_helper'

# TODO(alexstephen): Reformat tests to use nested describe blocks
# TODO(alexstephen): Add title == name tests
# Test Matrix:
#
# +--------------------------------------------------------+
# | Action  | Exists | Changes | Success | Result          |
# +--------------------------------------------------------+
# | create  | Y      | Y       | Y       | Edit            |
# | create  | Y      | Y       | N       | Fail            |
# | create  | Y      | N       | Y       | Fetch (no-op)   |
# | create  | Y      | N       | N       | Fail            |
# | create  | N      | Y       | Y       | Create          |
# | create  | N      | Y       | N       | Fail            |
# +--------------------------------------------------------+
# | delete  | Y      | Y       | Y       | Delete          |
# | delete  | Y      | Y       | N       | Fail            |
# | delete  | N      | Y       | Y       | Fail (no delete)|
# | delete  | N      | Y       | N       | Fail            |
# +--------------------------------------------------------+
# TODO(alexstephen): Add tests for manage
# TODO(alexstephen): Add tests for modify
context 'gcompute_instance' do
  context 'ensure == present' do
    context 'resource exists' do
      # Ensure present: resource exists, no change
      context 'no changes == no action' do
        # Ensure present: resource exists, no change, no name
        context 'title == name' do
          # Ensure present: resource exists, no change, no name, pass
          context 'title == name (pass)' do
            before do
              allow(Time).to receive(:now).and_return(
                Time.new(2017, 1, 2, 3, 4, 5)
              )
              expect_network_get_success \
                1,
                name: 'title0',
                disk: 'selflink(resource(disk,0))',
                network: 'selflink(resource(network,0))'
              expect_network_get_success \
                2,
                name: 'title1',
                disk: 'selflink(resource(disk,1))',
                network: 'selflink(resource(network,1))'
              expect_network_get_success \
                3,
                name: 'title2',
                disk: 'selflink(resource(disk,2))',
                network: 'selflink(resource(network,2))'
              expect_network_get_success_disk 1
              expect_network_get_success_disk 2
              expect_network_get_success_disk 3
              expect_network_get_success_network 1
              expect_network_get_success_network 2
              expect_network_get_success_network 3
            end

            let(:runner) do
              cookbook_paths = [File.join(File.dirname(__FILE__), '..', '..'),
                                File.join(File.dirname(__FILE__), 'cookbooks')]
              ChefSpec::SoloRunner.new(
                step_into: %w[gcompute_instance gcompute_disk gcompute_network],
                cookbook_path: cookbook_paths,
                platform: 'ubuntu',
                version: '16.04'
              )
            end

            let(:chef_run) do
              apply_recipe(
                <<-MANIFEST
                  gcompute_disk 'resource(disk,0)' do
                    action :create
                    d_label 'test name#0 data'
                    zone 'test zone#0 data'
                    project 'test project#0 data'
                    credential 'mycred'
                  end

                  gcompute_disk 'resource(disk,1)' do
                    action :create
                    d_label 'test name#1 data'
                    zone 'test zone#1 data'
                    project 'test project#1 data'
                    credential 'mycred'
                  end

                  gcompute_disk 'resource(disk,2)' do
                    action :create
                    d_label 'test name#2 data'
                    zone 'test zone#2 data'
                    project 'test project#2 data'
                    credential 'mycred'
                  end

                  gcompute_network 'resource(network,0)' do
                    action :create
                    n_label 'test name#0 data'
                    project 'test project#0 data'
                    credential 'mycred'
                  end

                  gcompute_network 'resource(network,1)' do
                    action :create
                    n_label 'test name#1 data'
                    project 'test project#1 data'
                    credential 'mycred'
                  end

                  gcompute_network 'resource(network,2)' do
                    action :create
                    n_label 'test name#2 data'
                    project 'test project#2 data'
                    credential 'mycred'
                  end

                  gcompute_instance 'title0' do
                    action :create
                    can_ip_forward true
                    disks [
                      {
                        'auto_delete' => true,
                        'boot' => true,
                        'device_name' => 'test device_name#0 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#0 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#0 data',
                          'sha256' => 'test sha256#0 data'
                        },
                        'index' => 1443881260,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#0 data',
                          'disk_size_gb' => 450092159,
                          'disk_type' => 734221916,
                          'source_image' => 992867234
                        },
                        'source' => 'resource(disk,0)'
                      },
                      {
                        'auto_delete' => false,
                        'boot' => false,
                        'device_name' => 'test device_name#1 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#1 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#1 data',
                          'sha256' => 'test sha256#1 data'
                        },
                        'index' => 2887762520,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#1 data',
                          'disk_size_gb' => 900184319,
                          'disk_type' => 1468443832,
                          'source_image' => 1985734469
                        },
                        'source' => 'resource(disk,1)'
                      },
                      {
                        'auto_delete' => true,
                        'boot' => true,
                        'device_name' => 'test device_name#2 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#2 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#2 data',
                          'sha256' => 'test sha256#2 data'
                        },
                        'index' => 4331643780,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#2 data',
                          'disk_size_gb' => 1350276479,
                          'disk_type' => 2202665748,
                          'source_image' => 2978601703
                        },
                        'source' => 'resource(disk,2)'
                      },
                      {
                        'auto_delete' => false,
                        'boot' => false,
                        'device_name' => 'test device_name#3 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#3 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#3 data',
                          'sha256' => 'test sha256#3 data'
                        },
                        'index' => 5775525040,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#3 data',
                          'disk_size_gb' => 1800368639,
                          'disk_type' => 2936887664,
                          'source_image' => 3971468938
                        },
                        'source' => 'resource(disk,0)'
                      }
                    ]
                    guest_accelerators [
                      {
                        'accelerator_count' => 2697554557,
                        'accelerator_type' => 'test accelerator_type#0 data'
                      },
                      {
                        'accelerator_count' => 5395109114,
                        'accelerator_type' => 'test accelerator_type#1 data'
                      },
                      {
                        'accelerator_count' => 8092663672,
                        'accelerator_type' => 'test accelerator_type#2 data'
                      },
                      {
                        'accelerator_count' => 10790218229,
                        'accelerator_type' => 'test accelerator_type#3 data'
                      }
                    ]
                    label_fingerprint 'test label_fingerprint#0 data'
                    machine_type 'test machine_type#0 data'
                    min_cpu_platform 'test min_cpu_platform#0 data'
                    network_interfaces [
                      {
                        'name' => 'test name#0 data',
                        'network' => 'resource(network,0)',
                        'network_ip' => 'test network_ip#0 data',
                        'subnetwork' => 'test subnetwork#0 data'
                      },
                      {
                        'name' => 'test name#1 data',
                        'network' => 'resource(network,1)',
                        'network_ip' => 'test network_ip#1 data',
                        'subnetwork' => 'test subnetwork#1 data'
                      }
                    ]
                    scheduling({
                      'automatic_restart' => true,
                      'on_host_maintenance' => 'test on_host_maintenance#0 data',
                      'preemptible' => true
                    })
                    service_accounts [
                      {
                        'email' => true,
                        'scopes' => ['rr', 'ss', 'tt', 'uu', 'vv']
                      },
                      {
                        'email' => false,
                        'scopes' => ['ll', 'mm', 'nn', 'oo', 'pp']
                      },
                      {
                        'email' => true,
                        'scopes' => ['ee', 'ff', 'gg', 'hh']
                      }
                    ]
                    tags({
                      'fingerprint' => 'test fingerprint#0 data',
                      'items' => ['hh', 'ii', 'jj']
                    })
                    zone 'test zone#0 data'
                    project 'test project#0 data'
                    credential 'mycred'
                  end

                  gcompute_instance 'title1' do
                    action :create
                    can_ip_forward false
                    disks [
                      {
                        'auto_delete' => false,
                        'boot' => false,
                        'device_name' => 'test device_name#1 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#1 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#1 data',
                          'sha256' => 'test sha256#1 data'
                        },
                        'index' => 2887762520,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#1 data',
                          'disk_size_gb' => 900184319,
                          'disk_type' => 1468443832,
                          'source_image' => 1985734469
                        },
                        'source' => 'resource(disk,1)'
                      },
                      {
                        'auto_delete' => true,
                        'boot' => true,
                        'device_name' => 'test device_name#2 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#2 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#2 data',
                          'sha256' => 'test sha256#2 data'
                        },
                        'index' => 4331643780,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#2 data',
                          'disk_size_gb' => 1350276479,
                          'disk_type' => 2202665748,
                          'source_image' => 2978601703
                        },
                        'source' => 'resource(disk,2)'
                      },
                      {
                        'auto_delete' => false,
                        'boot' => false,
                        'device_name' => 'test device_name#3 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#3 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#3 data',
                          'sha256' => 'test sha256#3 data'
                        },
                        'index' => 5775525040,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#3 data',
                          'disk_size_gb' => 1800368639,
                          'disk_type' => 2936887664,
                          'source_image' => 3971468938
                        },
                        'source' => 'resource(disk,0)'
                      }
                    ]
                    guest_accelerators [
                      {
                        'accelerator_count' => 5395109114,
                        'accelerator_type' => 'test accelerator_type#1 data'
                      },
                      {
                        'accelerator_count' => 8092663672,
                        'accelerator_type' => 'test accelerator_type#2 data'
                      }
                    ]
                    label_fingerprint 'test label_fingerprint#1 data'
                    machine_type 'test machine_type#1 data'
                    min_cpu_platform 'test min_cpu_platform#1 data'
                    network_interfaces [
                      {
                        'name' => 'test name#1 data',
                        'network' => 'resource(network,1)',
                        'network_ip' => 'test network_ip#1 data',
                        'subnetwork' => 'test subnetwork#1 data'
                      },
                      {
                        'name' => 'test name#2 data',
                        'network' => 'resource(network,2)',
                        'network_ip' => 'test network_ip#2 data',
                        'subnetwork' => 'test subnetwork#2 data'
                      },
                      {
                        'name' => 'test name#3 data',
                        'network' => 'resource(network,0)',
                        'network_ip' => 'test network_ip#3 data',
                        'subnetwork' => 'test subnetwork#3 data'
                      }
                    ]
                    scheduling({
                      'automatic_restart' => false,
                      'on_host_maintenance' => 'test on_host_maintenance#1 data',
                      'preemptible' => false
                    })
                    service_accounts [
                      {
                        'email' => false,
                        'scopes' => ['ll', 'mm', 'nn', 'oo', 'pp']
                      },
                      {
                        'email' => true,
                        'scopes' => ['ee', 'ff', 'gg', 'hh']
                      },
                      {
                        'email' => false,
                        'scopes' => ['ww', 'xx', 'yy', 'zz']
                      },
                      {
                        'email' => true,
                        'scopes' => ['rr', 'ss', 'tt']
                      },
                      {
                        'email' => false,
                        'scopes' => ['ll', 'mm', 'nn']
                      }
                    ]
                    tags({
                      'fingerprint' => 'test fingerprint#1 data',
                      'items' => ['qq', 'rr', 'ss', 'tt']
                    })
                    zone 'test zone#1 data'
                    project 'test project#1 data'
                    credential 'mycred'
                  end

                  gcompute_instance 'title2' do
                    action :create
                    can_ip_forward true
                    disks [
                      {
                        'auto_delete' => true,
                        'boot' => true,
                        'device_name' => 'test device_name#2 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#2 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#2 data',
                          'sha256' => 'test sha256#2 data'
                        },
                        'index' => 4331643780,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#2 data',
                          'disk_size_gb' => 1350276479,
                          'disk_type' => 2202665748,
                          'source_image' => 2978601703
                        },
                        'source' => 'resource(disk,2)'
                      },
                      {
                        'auto_delete' => false,
                        'boot' => false,
                        'device_name' => 'test device_name#3 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#3 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#3 data',
                          'sha256' => 'test sha256#3 data'
                        },
                        'index' => 5775525040,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#3 data',
                          'disk_size_gb' => 1800368639,
                          'disk_type' => 2936887664,
                          'source_image' => 3971468938
                        },
                        'source' => 'resource(disk,0)'
                      }
                    ]
                    guest_accelerators [
                      {
                        'accelerator_count' => 8092663672,
                        'accelerator_type' => 'test accelerator_type#2 data'
                      },
                      {
                        'accelerator_count' => 10790218229,
                        'accelerator_type' => 'test accelerator_type#3 data'
                      },
                      {
                        'accelerator_count' => 13487772787,
                        'accelerator_type' => 'test accelerator_type#4 data'
                      },
                      {
                        'accelerator_count' => 16185327344,
                        'accelerator_type' => 'test accelerator_type#5 data'
                      }
                    ]
                    label_fingerprint 'test label_fingerprint#2 data'
                    machine_type 'test machine_type#2 data'
                    min_cpu_platform 'test min_cpu_platform#2 data'
                    network_interfaces [
                      {
                        'name' => 'test name#2 data',
                        'network' => 'resource(network,2)',
                        'network_ip' => 'test network_ip#2 data',
                        'subnetwork' => 'test subnetwork#2 data'
                      },
                      {
                        'name' => 'test name#3 data',
                        'network' => 'resource(network,0)',
                        'network_ip' => 'test network_ip#3 data',
                        'subnetwork' => 'test subnetwork#3 data'
                      },
                      {
                        'name' => 'test name#4 data',
                        'network' => 'resource(network,1)',
                        'network_ip' => 'test network_ip#4 data',
                        'subnetwork' => 'test subnetwork#4 data'
                      },
                      {
                        'name' => 'test name#5 data',
                        'network' => 'resource(network,2)',
                        'network_ip' => 'test network_ip#5 data',
                        'subnetwork' => 'test subnetwork#5 data'
                      }
                    ]
                    scheduling({
                      'automatic_restart' => true,
                      'on_host_maintenance' => 'test on_host_maintenance#2 data',
                      'preemptible' => true
                    })
                    service_accounts [
                      {
                        'email' => true,
                        'scopes' => ['ee', 'ff', 'gg', 'hh']
                      },
                      {
                        'email' => false,
                        'scopes' => ['ww', 'xx', 'yy', 'zz']
                      },
                      {
                        'email' => true,
                        'scopes' => ['rr', 'ss', 'tt']
                      }
                    ]
                    tags({
                      'fingerprint' => 'test fingerprint#2 data',
                      'items' => ['yy', 'zz']
                    })
                    zone 'test zone#2 data'
                    project 'test project#2 data'
                    credential 'mycred'
                  end
                MANIFEST
              ) do |recipe_name|
                runner.converge(recipe_name) do
                  cred = Google::CredentialResourceMock.new('mycred',
                                                            runner.run_context)
                  runner.resource_collection.insert(cred)
                end
              end
            end

            context 'gcompute_instance[title0]' do
              subject do
                chef_run.find_resource(:gcompute_instance, 'title0')
              end

              it { is_expected.to have_attributes(can_ip_forward: true) }

              # TODO(nelsonjr): Implement complex array object test.
              # it 'disks' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex array object test.
              # it 'guestAccelerators' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(
                    label_fingerprint: 'test label_fingerprint#0 data'
                  )
              end

              it do
                is_expected
                  .to have_attributes(machine_type: 'test machine_type#0 data')
              end

              it do
                is_expected
                  .to have_attributes(
                    min_cpu_platform: 'test min_cpu_platform#0 data'
                  )
              end

              it { is_expected.to have_attributes(i_label: 'title0') }

              # TODO(nelsonjr): Implement complex array object test.
              # it 'networkInterfaces' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'scheduling' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex array object test.
              # it 'serviceAccounts' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'tags' do
              #   # Add test code here
              # end

              it { is_expected.to have_attributes(zone: 'test zone#0 data') }
            end

            context 'gcompute_instance[title1]' do
              subject do
                chef_run.find_resource(:gcompute_instance, 'title1')
              end

              it { is_expected.to have_attributes(can_ip_forward: false) }

              # TODO(nelsonjr): Implement complex array object test.
              # it 'disks' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex array object test.
              # it 'guestAccelerators' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(
                    label_fingerprint: 'test label_fingerprint#1 data'
                  )
              end

              it do
                is_expected
                  .to have_attributes(machine_type: 'test machine_type#1 data')
              end

              it do
                is_expected
                  .to have_attributes(
                    min_cpu_platform: 'test min_cpu_platform#1 data'
                  )
              end

              it { is_expected.to have_attributes(i_label: 'title1') }

              # TODO(nelsonjr): Implement complex array object test.
              # it 'networkInterfaces' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'scheduling' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex array object test.
              # it 'serviceAccounts' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'tags' do
              #   # Add test code here
              # end

              it { is_expected.to have_attributes(zone: 'test zone#1 data') }
            end

            context 'gcompute_instance[title2]' do
              subject do
                chef_run.find_resource(:gcompute_instance, 'title2')
              end

              it { is_expected.to have_attributes(can_ip_forward: true) }

              # TODO(nelsonjr): Implement complex array object test.
              # it 'disks' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex array object test.
              # it 'guestAccelerators' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(
                    label_fingerprint: 'test label_fingerprint#2 data'
                  )
              end

              it do
                is_expected
                  .to have_attributes(machine_type: 'test machine_type#2 data')
              end

              it do
                is_expected
                  .to have_attributes(
                    min_cpu_platform: 'test min_cpu_platform#2 data'
                  )
              end

              it { is_expected.to have_attributes(i_label: 'title2') }

              # TODO(nelsonjr): Implement complex array object test.
              # it 'networkInterfaces' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'scheduling' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex array object test.
              # it 'serviceAccounts' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'tags' do
              #   # Add test code here
              # end

              it { is_expected.to have_attributes(zone: 'test zone#2 data') }
            end
          end

          # Ensure present: resource exists, no change, no name, fail
          context 'title == name (fail)' do
            # TODO(alexstephen): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end

        # Ensure present: resource exists, no change, has name
        context 'title != name' do
          # Ensure present: resource exists, no change, has name, pass
          context 'title != name (pass)' do
            before do
              allow(Time).to receive(:now).and_return(
                Time.new(2017, 1, 2, 3, 4, 5)
              )
              expect_network_get_success \
                1,
                disk: 'selflink(resource(disk,0))',
                network: 'selflink(resource(network,0))'
              expect_network_get_success \
                2,
                disk: 'selflink(resource(disk,1))',
                network: 'selflink(resource(network,1))'
              expect_network_get_success \
                3,
                disk: 'selflink(resource(disk,2))',
                network: 'selflink(resource(network,2))'
              expect_network_get_success_disk 1
              expect_network_get_success_disk 2
              expect_network_get_success_disk 3
              expect_network_get_success_network 1
              expect_network_get_success_network 2
              expect_network_get_success_network 3
            end

            let(:runner) do
              cookbook_paths = [File.join(File.dirname(__FILE__), '..', '..'),
                                File.join(File.dirname(__FILE__), 'cookbooks')]
              ChefSpec::SoloRunner.new(
                step_into: %w[gcompute_instance gcompute_disk gcompute_network],
                cookbook_path: cookbook_paths,
                platform: 'ubuntu',
                version: '16.04'
              )
            end

            let(:chef_run) do
              apply_recipe(
                <<-MANIFEST
                  gcompute_disk 'resource(disk,0)' do
                    action :create
                    d_label 'test name#0 data'
                    zone 'test zone#0 data'
                    project 'test project#0 data'
                    credential 'mycred'
                  end

                  gcompute_disk 'resource(disk,1)' do
                    action :create
                    d_label 'test name#1 data'
                    zone 'test zone#1 data'
                    project 'test project#1 data'
                    credential 'mycred'
                  end

                  gcompute_disk 'resource(disk,2)' do
                    action :create
                    d_label 'test name#2 data'
                    zone 'test zone#2 data'
                    project 'test project#2 data'
                    credential 'mycred'
                  end

                  gcompute_network 'resource(network,0)' do
                    action :create
                    n_label 'test name#0 data'
                    project 'test project#0 data'
                    credential 'mycred'
                  end

                  gcompute_network 'resource(network,1)' do
                    action :create
                    n_label 'test name#1 data'
                    project 'test project#1 data'
                    credential 'mycred'
                  end

                  gcompute_network 'resource(network,2)' do
                    action :create
                    n_label 'test name#2 data'
                    project 'test project#2 data'
                    credential 'mycred'
                  end

                  gcompute_instance 'title0' do
                    action :create
                    can_ip_forward true
                    disks [
                      {
                        'auto_delete' => true,
                        'boot' => true,
                        'device_name' => 'test device_name#0 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#0 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#0 data',
                          'sha256' => 'test sha256#0 data'
                        },
                        'index' => 1443881260,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#0 data',
                          'disk_size_gb' => 450092159,
                          'disk_type' => 734221916,
                          'source_image' => 992867234
                        },
                        'source' => 'resource(disk,0)'
                      },
                      {
                        'auto_delete' => false,
                        'boot' => false,
                        'device_name' => 'test device_name#1 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#1 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#1 data',
                          'sha256' => 'test sha256#1 data'
                        },
                        'index' => 2887762520,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#1 data',
                          'disk_size_gb' => 900184319,
                          'disk_type' => 1468443832,
                          'source_image' => 1985734469
                        },
                        'source' => 'resource(disk,1)'
                      },
                      {
                        'auto_delete' => true,
                        'boot' => true,
                        'device_name' => 'test device_name#2 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#2 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#2 data',
                          'sha256' => 'test sha256#2 data'
                        },
                        'index' => 4331643780,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#2 data',
                          'disk_size_gb' => 1350276479,
                          'disk_type' => 2202665748,
                          'source_image' => 2978601703
                        },
                        'source' => 'resource(disk,2)'
                      },
                      {
                        'auto_delete' => false,
                        'boot' => false,
                        'device_name' => 'test device_name#3 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#3 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#3 data',
                          'sha256' => 'test sha256#3 data'
                        },
                        'index' => 5775525040,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#3 data',
                          'disk_size_gb' => 1800368639,
                          'disk_type' => 2936887664,
                          'source_image' => 3971468938
                        },
                        'source' => 'resource(disk,0)'
                      }
                    ]
                    guest_accelerators [
                      {
                        'accelerator_count' => 2697554557,
                        'accelerator_type' => 'test accelerator_type#0 data'
                      },
                      {
                        'accelerator_count' => 5395109114,
                        'accelerator_type' => 'test accelerator_type#1 data'
                      },
                      {
                        'accelerator_count' => 8092663672,
                        'accelerator_type' => 'test accelerator_type#2 data'
                      },
                      {
                        'accelerator_count' => 10790218229,
                        'accelerator_type' => 'test accelerator_type#3 data'
                      }
                    ]
                    i_label 'test name#0 data'
                    label_fingerprint 'test label_fingerprint#0 data'
                    machine_type 'test machine_type#0 data'
                    min_cpu_platform 'test min_cpu_platform#0 data'
                    network_interfaces [
                      {
                        'name' => 'test name#0 data',
                        'network' => 'resource(network,0)',
                        'network_ip' => 'test network_ip#0 data',
                        'subnetwork' => 'test subnetwork#0 data'
                      },
                      {
                        'name' => 'test name#1 data',
                        'network' => 'resource(network,1)',
                        'network_ip' => 'test network_ip#1 data',
                        'subnetwork' => 'test subnetwork#1 data'
                      }
                    ]
                    scheduling({
                      'automatic_restart' => true,
                      'on_host_maintenance' => 'test on_host_maintenance#0 data',
                      'preemptible' => true
                    })
                    service_accounts [
                      {
                        'email' => true,
                        'scopes' => ['rr', 'ss', 'tt', 'uu', 'vv']
                      },
                      {
                        'email' => false,
                        'scopes' => ['ll', 'mm', 'nn', 'oo', 'pp']
                      },
                      {
                        'email' => true,
                        'scopes' => ['ee', 'ff', 'gg', 'hh']
                      }
                    ]
                    tags({
                      'fingerprint' => 'test fingerprint#0 data',
                      'items' => ['hh', 'ii', 'jj']
                    })
                    zone 'test zone#0 data'
                    project 'test project#0 data'
                    credential 'mycred'
                  end

                  gcompute_instance 'title1' do
                    action :create
                    can_ip_forward false
                    disks [
                      {
                        'auto_delete' => false,
                        'boot' => false,
                        'device_name' => 'test device_name#1 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#1 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#1 data',
                          'sha256' => 'test sha256#1 data'
                        },
                        'index' => 2887762520,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#1 data',
                          'disk_size_gb' => 900184319,
                          'disk_type' => 1468443832,
                          'source_image' => 1985734469
                        },
                        'source' => 'resource(disk,1)'
                      },
                      {
                        'auto_delete' => true,
                        'boot' => true,
                        'device_name' => 'test device_name#2 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#2 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#2 data',
                          'sha256' => 'test sha256#2 data'
                        },
                        'index' => 4331643780,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#2 data',
                          'disk_size_gb' => 1350276479,
                          'disk_type' => 2202665748,
                          'source_image' => 2978601703
                        },
                        'source' => 'resource(disk,2)'
                      },
                      {
                        'auto_delete' => false,
                        'boot' => false,
                        'device_name' => 'test device_name#3 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#3 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#3 data',
                          'sha256' => 'test sha256#3 data'
                        },
                        'index' => 5775525040,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#3 data',
                          'disk_size_gb' => 1800368639,
                          'disk_type' => 2936887664,
                          'source_image' => 3971468938
                        },
                        'source' => 'resource(disk,0)'
                      }
                    ]
                    guest_accelerators [
                      {
                        'accelerator_count' => 5395109114,
                        'accelerator_type' => 'test accelerator_type#1 data'
                      },
                      {
                        'accelerator_count' => 8092663672,
                        'accelerator_type' => 'test accelerator_type#2 data'
                      }
                    ]
                    i_label 'test name#1 data'
                    label_fingerprint 'test label_fingerprint#1 data'
                    machine_type 'test machine_type#1 data'
                    min_cpu_platform 'test min_cpu_platform#1 data'
                    network_interfaces [
                      {
                        'name' => 'test name#1 data',
                        'network' => 'resource(network,1)',
                        'network_ip' => 'test network_ip#1 data',
                        'subnetwork' => 'test subnetwork#1 data'
                      },
                      {
                        'name' => 'test name#2 data',
                        'network' => 'resource(network,2)',
                        'network_ip' => 'test network_ip#2 data',
                        'subnetwork' => 'test subnetwork#2 data'
                      },
                      {
                        'name' => 'test name#3 data',
                        'network' => 'resource(network,0)',
                        'network_ip' => 'test network_ip#3 data',
                        'subnetwork' => 'test subnetwork#3 data'
                      }
                    ]
                    scheduling({
                      'automatic_restart' => false,
                      'on_host_maintenance' => 'test on_host_maintenance#1 data',
                      'preemptible' => false
                    })
                    service_accounts [
                      {
                        'email' => false,
                        'scopes' => ['ll', 'mm', 'nn', 'oo', 'pp']
                      },
                      {
                        'email' => true,
                        'scopes' => ['ee', 'ff', 'gg', 'hh']
                      },
                      {
                        'email' => false,
                        'scopes' => ['ww', 'xx', 'yy', 'zz']
                      },
                      {
                        'email' => true,
                        'scopes' => ['rr', 'ss', 'tt']
                      },
                      {
                        'email' => false,
                        'scopes' => ['ll', 'mm', 'nn']
                      }
                    ]
                    tags({
                      'fingerprint' => 'test fingerprint#1 data',
                      'items' => ['qq', 'rr', 'ss', 'tt']
                    })
                    zone 'test zone#1 data'
                    project 'test project#1 data'
                    credential 'mycred'
                  end

                  gcompute_instance 'title2' do
                    action :create
                    can_ip_forward true
                    disks [
                      {
                        'auto_delete' => true,
                        'boot' => true,
                        'device_name' => 'test device_name#2 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#2 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#2 data',
                          'sha256' => 'test sha256#2 data'
                        },
                        'index' => 4331643780,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#2 data',
                          'disk_size_gb' => 1350276479,
                          'disk_type' => 2202665748,
                          'source_image' => 2978601703
                        },
                        'source' => 'resource(disk,2)'
                      },
                      {
                        'auto_delete' => false,
                        'boot' => false,
                        'device_name' => 'test device_name#3 data',
                        'disk_encryption_key' => {
                          'raw_key' => 'test raw_key#3 data',
                          'rsa_encrypted_key' => 'test rsa_encrypted_key#3 data',
                          'sha256' => 'test sha256#3 data'
                        },
                        'index' => 5775525040,
                        'initialize_params' => {
                          'disk_name' => 'test disk_name#3 data',
                          'disk_size_gb' => 1800368639,
                          'disk_type' => 2936887664,
                          'source_image' => 3971468938
                        },
                        'source' => 'resource(disk,0)'
                      }
                    ]
                    guest_accelerators [
                      {
                        'accelerator_count' => 8092663672,
                        'accelerator_type' => 'test accelerator_type#2 data'
                      },
                      {
                        'accelerator_count' => 10790218229,
                        'accelerator_type' => 'test accelerator_type#3 data'
                      },
                      {
                        'accelerator_count' => 13487772787,
                        'accelerator_type' => 'test accelerator_type#4 data'
                      },
                      {
                        'accelerator_count' => 16185327344,
                        'accelerator_type' => 'test accelerator_type#5 data'
                      }
                    ]
                    i_label 'test name#2 data'
                    label_fingerprint 'test label_fingerprint#2 data'
                    machine_type 'test machine_type#2 data'
                    min_cpu_platform 'test min_cpu_platform#2 data'
                    network_interfaces [
                      {
                        'name' => 'test name#2 data',
                        'network' => 'resource(network,2)',
                        'network_ip' => 'test network_ip#2 data',
                        'subnetwork' => 'test subnetwork#2 data'
                      },
                      {
                        'name' => 'test name#3 data',
                        'network' => 'resource(network,0)',
                        'network_ip' => 'test network_ip#3 data',
                        'subnetwork' => 'test subnetwork#3 data'
                      },
                      {
                        'name' => 'test name#4 data',
                        'network' => 'resource(network,1)',
                        'network_ip' => 'test network_ip#4 data',
                        'subnetwork' => 'test subnetwork#4 data'
                      },
                      {
                        'name' => 'test name#5 data',
                        'network' => 'resource(network,2)',
                        'network_ip' => 'test network_ip#5 data',
                        'subnetwork' => 'test subnetwork#5 data'
                      }
                    ]
                    scheduling({
                      'automatic_restart' => true,
                      'on_host_maintenance' => 'test on_host_maintenance#2 data',
                      'preemptible' => true
                    })
                    service_accounts [
                      {
                        'email' => true,
                        'scopes' => ['ee', 'ff', 'gg', 'hh']
                      },
                      {
                        'email' => false,
                        'scopes' => ['ww', 'xx', 'yy', 'zz']
                      },
                      {
                        'email' => true,
                        'scopes' => ['rr', 'ss', 'tt']
                      }
                    ]
                    tags({
                      'fingerprint' => 'test fingerprint#2 data',
                      'items' => ['yy', 'zz']
                    })
                    zone 'test zone#2 data'
                    project 'test project#2 data'
                    credential 'mycred'
                  end
                MANIFEST
              ) do |recipe_name|
                runner.converge(recipe_name) do
                  cred = Google::CredentialResourceMock.new('mycred',
                                                            runner.run_context)
                  runner.resource_collection.insert(cred)
                end
              end
            end

            context 'gcompute_instance[title0]' do
              subject do
                chef_run.find_resource(:gcompute_instance, 'title0')
              end

              it { is_expected.to have_attributes(can_ip_forward: true) }

              # TODO(nelsonjr): Implement complex array object test.
              # it 'disks' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex array object test.
              # it 'guestAccelerators' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(
                    label_fingerprint: 'test label_fingerprint#0 data'
                  )
              end

              it do
                is_expected
                  .to have_attributes(machine_type: 'test machine_type#0 data')
              end

              it do
                is_expected
                  .to have_attributes(
                    min_cpu_platform: 'test min_cpu_platform#0 data'
                  )
              end

              it { is_expected.to have_attributes(i_label: 'test name#0 data') }

              # TODO(nelsonjr): Implement complex array object test.
              # it 'networkInterfaces' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'scheduling' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex array object test.
              # it 'serviceAccounts' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'tags' do
              #   # Add test code here
              # end

              it { is_expected.to have_attributes(zone: 'test zone#0 data') }
            end

            context 'gcompute_instance[title1]' do
              subject do
                chef_run.find_resource(:gcompute_instance, 'title1')
              end

              it { is_expected.to have_attributes(can_ip_forward: false) }

              # TODO(nelsonjr): Implement complex array object test.
              # it 'disks' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex array object test.
              # it 'guestAccelerators' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(
                    label_fingerprint: 'test label_fingerprint#1 data'
                  )
              end

              it do
                is_expected
                  .to have_attributes(machine_type: 'test machine_type#1 data')
              end

              it do
                is_expected
                  .to have_attributes(
                    min_cpu_platform: 'test min_cpu_platform#1 data'
                  )
              end

              it { is_expected.to have_attributes(i_label: 'test name#1 data') }

              # TODO(nelsonjr): Implement complex array object test.
              # it 'networkInterfaces' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'scheduling' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex array object test.
              # it 'serviceAccounts' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'tags' do
              #   # Add test code here
              # end

              it { is_expected.to have_attributes(zone: 'test zone#1 data') }
            end

            context 'gcompute_instance[title2]' do
              subject do
                chef_run.find_resource(:gcompute_instance, 'title2')
              end

              it { is_expected.to have_attributes(can_ip_forward: true) }

              # TODO(nelsonjr): Implement complex array object test.
              # it 'disks' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex array object test.
              # it 'guestAccelerators' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(
                    label_fingerprint: 'test label_fingerprint#2 data'
                  )
              end

              it do
                is_expected
                  .to have_attributes(machine_type: 'test machine_type#2 data')
              end

              it do
                is_expected
                  .to have_attributes(
                    min_cpu_platform: 'test min_cpu_platform#2 data'
                  )
              end

              it { is_expected.to have_attributes(i_label: 'test name#2 data') }

              # TODO(nelsonjr): Implement complex array object test.
              # it 'networkInterfaces' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'scheduling' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex array object test.
              # it 'serviceAccounts' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'tags' do
              #   # Add test code here
              # end

              it { is_expected.to have_attributes(zone: 'test zone#2 data') }
            end
          end

          # Ensure present: resource exists, no change, has name, fail
          context 'title != name (fail)' do
            # TODO(alexstephen): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end
      end

      # Ensure present: resource exists, changes
      context 'changes == action' do
        # Ensure present: resource exists, changes, no name
        context 'title == name' do
          # Ensure present: resource exists, changes, no name, pass
          context 'title == name (pass)' do
            # TODO(alexstephen): Implement new test format.
          end

          # Ensure present: resource exists, changes, no name, fail
          context 'title == name (fail)' do
            # TODO(alexstephen): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end

        # Ensure present: resource exists, changes, has name
        context 'title != name' do
          # Ensure present: resource exists, changes, has name, pass
          context 'title != name (pass)' do
            # TODO(alexstephen): Implement new test format
          end

          # Ensure present: resource exists, changes, has name, fail
          context 'title != name (fail)' do
            # TODO(alexstephen): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end
      end
    end

    context 'resource missing' do
      # Ensure present: resource missing, ignore, no name
      context 'title == name' do
        # Ensure present: resource missing, ignore, no name, pass
        context 'title == name (pass)' do
          before do
            expect_network_get_failed 1,
                                      name: 'title0',
                                      disk: 'selflink(resource(disk,0))',
                                      network: 'selflink(resource(network,0))'
            expect_network_create \
              1,
              {
                'kind' => 'compute#instance',
                'canIpForward' => true,
                'disks' => [
                  {
                    'autoDelete' => true,
                    'boot' => true,
                    'deviceName' => 'test device_name#0 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#0 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#0 data',
                      'sha256' => 'test sha256#0 data'
                    },
                    'index' => 1_443_881_260,
                    'source' => 'selflink(resource(disk,0))',
                    'initializeParams' => {
                      'diskName' => 'test disk_name#0 data',
                      'diskSizeGb' => 450_092_159,
                      'diskType' => 734_221_916,
                      'sourceImage' => 992_867_234
                    }
                  },
                  {
                    'autoDelete' => false,
                    'boot' => false,
                    'deviceName' => 'test device_name#1 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#1 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#1 data',
                      'sha256' => 'test sha256#1 data'
                    },
                    'index' => 2_887_762_520,
                    'source' => 'selflink(resource(disk,1))',
                    'initializeParams' => {
                      'diskName' => 'test disk_name#1 data',
                      'diskSizeGb' => 900_184_319,
                      'diskType' => 1_468_443_832,
                      'sourceImage' => 1_985_734_469
                    }
                  },
                  {
                    'autoDelete' => true,
                    'boot' => true,
                    'deviceName' => 'test device_name#2 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#2 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#2 data',
                      'sha256' => 'test sha256#2 data'
                    },
                    'index' => 4_331_643_780,
                    'source' => 'selflink(resource(disk,2))',
                    'initializeParams' => {
                      'diskName' => 'test disk_name#2 data',
                      'diskSizeGb' => 1_350_276_479,
                      'diskType' => 2_202_665_748,
                      'sourceImage' => 2_978_601_703
                    }
                  },
                  {
                    'autoDelete' => false,
                    'boot' => false,
                    'deviceName' => 'test device_name#3 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#3 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#3 data',
                      'sha256' => 'test sha256#3 data'
                    },
                    'index' => 5_775_525_040,
                    'source' => 'selflink(resource(disk,0))',
                    'initializeParams' => {
                      'diskName' => 'test disk_name#3 data',
                      'diskSizeGb' => 1_800_368_639,
                      'diskType' => 2_936_887_664,
                      'sourceImage' => 3_971_468_938
                    }
                  }
                ],
                'guestAccelerators' => [
                  {
                    'acceleratorCount' => 2_697_554_557,
                    'acceleratorType' => 'test accelerator_type#0 data'
                  },
                  {
                    'acceleratorCount' => 5_395_109_114,
                    'acceleratorType' => 'test accelerator_type#1 data'
                  },
                  {
                    'acceleratorCount' => 8_092_663_672,
                    'acceleratorType' => 'test accelerator_type#2 data'
                  },
                  {
                    'acceleratorCount' => 10_790_218_229,
                    'acceleratorType' => 'test accelerator_type#3 data'
                  }
                ],
                'labelFingerprint' => 'test label_fingerprint#0 data',
                'machineType' => 'test machine_type#0 data',
                'minCpuPlatform' => 'test min_cpu_platform#0 data',
                'name' => 'title0',
                'networkInterfaces' => [
                  {
                    'name' => 'test name#0 data',
                    'network' => 'selflink(resource(network,0))',
                    'networkIP' => 'test network_ip#0 data',
                    'subnetwork' => 'test subnetwork#0 data'
                  },
                  {
                    'name' => 'test name#1 data',
                    'network' => 'selflink(resource(network,1))',
                    'networkIP' => 'test network_ip#1 data',
                    'subnetwork' => 'test subnetwork#1 data'
                  }
                ],
                'scheduling' => {
                  'automaticRestart' => true,
                  'onHostMaintenance' => 'test on_host_maintenance#0 data',
                  'preemptible' => true
                },
                'serviceAccounts' => [
                  {
                    'email' => true,
                    'scopes' => %w[rr ss tt uu vv]
                  },
                  {
                    'email' => false,
                    'scopes' => %w[ll mm nn oo pp]
                  },
                  {
                    'email' => true,
                    'scopes' => %w[ee ff gg hh]
                  }
                ],
                'tags' => {
                  'fingerprint' => 'test fingerprint#0 data',
                  'items' => %w[hh ii jj]
                }
              },
              name: 'title0',
              disk: 'selflink(resource(disk,0))',
              network: 'selflink(resource(network,0))'
            expect_network_get_async 1,
                                     name: 'title0',
                                     disk: 'selflink(resource(disk,0))',
                                     network: 'selflink(resource(network,0))'
            expect_network_get_success_disk 1
            expect_network_get_success_disk 2
            expect_network_get_success_disk 3
            expect_network_get_success_network 1
            expect_network_get_success_network 2
          end

          let(:runner) do
            cookbook_paths = [File.join(File.dirname(__FILE__), '..', '..'),
                              File.join(File.dirname(__FILE__), 'cookbooks')]
            ChefSpec::SoloRunner.new(
              step_into: %w[gcompute_instance gcompute_disk gcompute_network],
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gcompute_disk 'resource(disk,0)' do
                  action :create
                  d_label 'test name#0 data'
                  zone 'test zone#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end

                gcompute_disk 'resource(disk,1)' do
                  action :create
                  d_label 'test name#1 data'
                  zone 'test zone#1 data'
                  project 'test project#1 data'
                  credential 'mycred'
                end

                gcompute_disk 'resource(disk,2)' do
                  action :create
                  d_label 'test name#2 data'
                  zone 'test zone#2 data'
                  project 'test project#2 data'
                  credential 'mycred'
                end

                gcompute_network 'resource(network,0)' do
                  action :create
                  n_label 'test name#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end

                gcompute_network 'resource(network,1)' do
                  action :create
                  n_label 'test name#1 data'
                  project 'test project#1 data'
                  credential 'mycred'
                end

                gcompute_instance 'title0' do
                  action :create
                  can_ip_forward true
                  disks [
                    {
                      'auto_delete' => true,
                      'boot' => true,
                      'device_name' => 'test device_name#0 data',
                      'disk_encryption_key' => {
                        'raw_key' => 'test raw_key#0 data',
                        'rsa_encrypted_key' => 'test rsa_encrypted_key#0 data',
                        'sha256' => 'test sha256#0 data'
                      },
                      'index' => 1443881260,
                      'initialize_params' => {
                        'disk_name' => 'test disk_name#0 data',
                        'disk_size_gb' => 450092159,
                        'disk_type' => 734221916,
                        'source_image' => 992867234
                      },
                      'source' => 'resource(disk,0)'
                    },
                    {
                      'auto_delete' => false,
                      'boot' => false,
                      'device_name' => 'test device_name#1 data',
                      'disk_encryption_key' => {
                        'raw_key' => 'test raw_key#1 data',
                        'rsa_encrypted_key' => 'test rsa_encrypted_key#1 data',
                        'sha256' => 'test sha256#1 data'
                      },
                      'index' => 2887762520,
                      'initialize_params' => {
                        'disk_name' => 'test disk_name#1 data',
                        'disk_size_gb' => 900184319,
                        'disk_type' => 1468443832,
                        'source_image' => 1985734469
                      },
                      'source' => 'resource(disk,1)'
                    },
                    {
                      'auto_delete' => true,
                      'boot' => true,
                      'device_name' => 'test device_name#2 data',
                      'disk_encryption_key' => {
                        'raw_key' => 'test raw_key#2 data',
                        'rsa_encrypted_key' => 'test rsa_encrypted_key#2 data',
                        'sha256' => 'test sha256#2 data'
                      },
                      'index' => 4331643780,
                      'initialize_params' => {
                        'disk_name' => 'test disk_name#2 data',
                        'disk_size_gb' => 1350276479,
                        'disk_type' => 2202665748,
                        'source_image' => 2978601703
                      },
                      'source' => 'resource(disk,2)'
                    },
                    {
                      'auto_delete' => false,
                      'boot' => false,
                      'device_name' => 'test device_name#3 data',
                      'disk_encryption_key' => {
                        'raw_key' => 'test raw_key#3 data',
                        'rsa_encrypted_key' => 'test rsa_encrypted_key#3 data',
                        'sha256' => 'test sha256#3 data'
                      },
                      'index' => 5775525040,
                      'initialize_params' => {
                        'disk_name' => 'test disk_name#3 data',
                        'disk_size_gb' => 1800368639,
                        'disk_type' => 2936887664,
                        'source_image' => 3971468938
                      },
                      'source' => 'resource(disk,0)'
                    }
                  ]
                  guest_accelerators [
                    {
                      'accelerator_count' => 2697554557,
                      'accelerator_type' => 'test accelerator_type#0 data'
                    },
                    {
                      'accelerator_count' => 5395109114,
                      'accelerator_type' => 'test accelerator_type#1 data'
                    },
                    {
                      'accelerator_count' => 8092663672,
                      'accelerator_type' => 'test accelerator_type#2 data'
                    },
                    {
                      'accelerator_count' => 10790218229,
                      'accelerator_type' => 'test accelerator_type#3 data'
                    }
                  ]
                  label_fingerprint 'test label_fingerprint#0 data'
                  machine_type 'test machine_type#0 data'
                  min_cpu_platform 'test min_cpu_platform#0 data'
                  network_interfaces [
                    {
                      'name' => 'test name#0 data',
                      'network' => 'resource(network,0)',
                      'network_ip' => 'test network_ip#0 data',
                      'subnetwork' => 'test subnetwork#0 data'
                    },
                    {
                      'name' => 'test name#1 data',
                      'network' => 'resource(network,1)',
                      'network_ip' => 'test network_ip#1 data',
                      'subnetwork' => 'test subnetwork#1 data'
                    }
                  ]
                  scheduling({
                    'automatic_restart' => true,
                    'on_host_maintenance' => 'test on_host_maintenance#0 data',
                    'preemptible' => true
                  })
                  service_accounts [
                    {
                      'email' => true,
                      'scopes' => ['rr', 'ss', 'tt', 'uu', 'vv']
                    },
                    {
                      'email' => false,
                      'scopes' => ['ll', 'mm', 'nn', 'oo', 'pp']
                    },
                    {
                      'email' => true,
                      'scopes' => ['ee', 'ff', 'gg', 'hh']
                    }
                  ]
                  tags({
                    'fingerprint' => 'test fingerprint#0 data',
                    'items' => ['hh', 'ii', 'jj']
                  })
                  zone 'test zone#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gcompute_instance, 'title0')
          end

          it 'should run test correctly' do
            expect(chef_run).to create(:gcompute_instance,
                                       'title0')
          end
          it { is_expected.to have_attributes(can_ip_forward: true) }

          # TODO(nelsonjr): Implement complex array object test.
          # it 'disks' do
          #   # Add test code here
          # end

          # TODO(nelsonjr): Implement complex array object test.
          # it 'guestAccelerators' do
          #   # Add test code here
          # end

          it do
            is_expected
              .to have_attributes(
                label_fingerprint: 'test label_fingerprint#0 data'
              )
          end

          it do
            is_expected
              .to have_attributes(machine_type: 'test machine_type#0 data')
          end

          it do
            is_expected
              .to have_attributes(
                min_cpu_platform: 'test min_cpu_platform#0 data'
              )
          end

          it { is_expected.to have_attributes(i_label: 'title0') }

          # TODO(nelsonjr): Implement complex array object test.
          # it 'networkInterfaces' do
          #   # Add test code here
          # end

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'scheduling' do
          #   # Add test code here
          # end

          # TODO(nelsonjr): Implement complex array object test.
          # it 'serviceAccounts' do
          #   # Add test code here
          # end

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'tags' do
          #   # Add test code here
          # end

          it { is_expected.to have_attributes(zone: 'test zone#0 data') }
        end

        # Ensure present: resource missing, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure present: resource missing, ignore, has name
      context 'title != name' do
        # Ensure present: resource missing, ignore, has name, pass
        context 'title != name (pass)' do
          before do
            expect_network_get_failed 1,
                                      disk: 'selflink(resource(disk,0))',
                                      network: 'selflink(resource(network,0))'
            expect_network_create \
              1,
              {
                'kind' => 'compute#instance',
                'canIpForward' => true,
                'disks' => [
                  {
                    'autoDelete' => true,
                    'boot' => true,
                    'deviceName' => 'test device_name#0 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#0 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#0 data',
                      'sha256' => 'test sha256#0 data'
                    },
                    'index' => 1_443_881_260,
                    'source' => 'selflink(resource(disk,0))',
                    'initializeParams' => {
                      'diskName' => 'test disk_name#0 data',
                      'diskSizeGb' => 450_092_159,
                      'diskType' => 734_221_916,
                      'sourceImage' => 992_867_234
                    }
                  },
                  {
                    'autoDelete' => false,
                    'boot' => false,
                    'deviceName' => 'test device_name#1 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#1 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#1 data',
                      'sha256' => 'test sha256#1 data'
                    },
                    'index' => 2_887_762_520,
                    'source' => 'selflink(resource(disk,1))',
                    'initializeParams' => {
                      'diskName' => 'test disk_name#1 data',
                      'diskSizeGb' => 900_184_319,
                      'diskType' => 1_468_443_832,
                      'sourceImage' => 1_985_734_469
                    }
                  },
                  {
                    'autoDelete' => true,
                    'boot' => true,
                    'deviceName' => 'test device_name#2 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#2 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#2 data',
                      'sha256' => 'test sha256#2 data'
                    },
                    'index' => 4_331_643_780,
                    'source' => 'selflink(resource(disk,2))',
                    'initializeParams' => {
                      'diskName' => 'test disk_name#2 data',
                      'diskSizeGb' => 1_350_276_479,
                      'diskType' => 2_202_665_748,
                      'sourceImage' => 2_978_601_703
                    }
                  },
                  {
                    'autoDelete' => false,
                    'boot' => false,
                    'deviceName' => 'test device_name#3 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#3 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#3 data',
                      'sha256' => 'test sha256#3 data'
                    },
                    'index' => 5_775_525_040,
                    'source' => 'selflink(resource(disk,0))',
                    'initializeParams' => {
                      'diskName' => 'test disk_name#3 data',
                      'diskSizeGb' => 1_800_368_639,
                      'diskType' => 2_936_887_664,
                      'sourceImage' => 3_971_468_938
                    }
                  }
                ],
                'guestAccelerators' => [
                  {
                    'acceleratorCount' => 2_697_554_557,
                    'acceleratorType' => 'test accelerator_type#0 data'
                  },
                  {
                    'acceleratorCount' => 5_395_109_114,
                    'acceleratorType' => 'test accelerator_type#1 data'
                  },
                  {
                    'acceleratorCount' => 8_092_663_672,
                    'acceleratorType' => 'test accelerator_type#2 data'
                  },
                  {
                    'acceleratorCount' => 10_790_218_229,
                    'acceleratorType' => 'test accelerator_type#3 data'
                  }
                ],
                'labelFingerprint' => 'test label_fingerprint#0 data',
                'machineType' => 'test machine_type#0 data',
                'minCpuPlatform' => 'test min_cpu_platform#0 data',
                'name' => 'test name#0 data',
                'networkInterfaces' => [
                  {
                    'name' => 'test name#0 data',
                    'network' => 'selflink(resource(network,0))',
                    'networkIP' => 'test network_ip#0 data',
                    'subnetwork' => 'test subnetwork#0 data'
                  },
                  {
                    'name' => 'test name#1 data',
                    'network' => 'selflink(resource(network,1))',
                    'networkIP' => 'test network_ip#1 data',
                    'subnetwork' => 'test subnetwork#1 data'
                  }
                ],
                'scheduling' => {
                  'automaticRestart' => true,
                  'onHostMaintenance' => 'test on_host_maintenance#0 data',
                  'preemptible' => true
                },
                'serviceAccounts' => [
                  {
                    'email' => true,
                    'scopes' => %w[rr ss tt uu vv]
                  },
                  {
                    'email' => false,
                    'scopes' => %w[ll mm nn oo pp]
                  },
                  {
                    'email' => true,
                    'scopes' => %w[ee ff gg hh]
                  }
                ],
                'tags' => {
                  'fingerprint' => 'test fingerprint#0 data',
                  'items' => %w[hh ii jj]
                }
              },
              disk: 'selflink(resource(disk,0))',
              network: 'selflink(resource(network,0))'
            expect_network_get_async 1,
                                     disk: 'selflink(resource(disk,0))',
                                     network: 'selflink(resource(network,0))'
            expect_network_get_success_disk 1
            expect_network_get_success_disk 2
            expect_network_get_success_disk 3
            expect_network_get_success_network 1
            expect_network_get_success_network 2
          end

          let(:runner) do
            cookbook_paths = [File.join(File.dirname(__FILE__), '..', '..'),
                              File.join(File.dirname(__FILE__), 'cookbooks')]
            ChefSpec::SoloRunner.new(
              step_into: %w[gcompute_instance gcompute_disk gcompute_network],
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gcompute_disk 'resource(disk,0)' do
                  action :create
                  d_label 'test name#0 data'
                  zone 'test zone#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end

                gcompute_disk 'resource(disk,1)' do
                  action :create
                  d_label 'test name#1 data'
                  zone 'test zone#1 data'
                  project 'test project#1 data'
                  credential 'mycred'
                end

                gcompute_disk 'resource(disk,2)' do
                  action :create
                  d_label 'test name#2 data'
                  zone 'test zone#2 data'
                  project 'test project#2 data'
                  credential 'mycred'
                end

                gcompute_network 'resource(network,0)' do
                  action :create
                  n_label 'test name#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end

                gcompute_network 'resource(network,1)' do
                  action :create
                  n_label 'test name#1 data'
                  project 'test project#1 data'
                  credential 'mycred'
                end

                gcompute_instance 'title0' do
                  action :create
                  can_ip_forward true
                  disks [
                    {
                      'auto_delete' => true,
                      'boot' => true,
                      'device_name' => 'test device_name#0 data',
                      'disk_encryption_key' => {
                        'raw_key' => 'test raw_key#0 data',
                        'rsa_encrypted_key' => 'test rsa_encrypted_key#0 data',
                        'sha256' => 'test sha256#0 data'
                      },
                      'index' => 1443881260,
                      'initialize_params' => {
                        'disk_name' => 'test disk_name#0 data',
                        'disk_size_gb' => 450092159,
                        'disk_type' => 734221916,
                        'source_image' => 992867234
                      },
                      'source' => 'resource(disk,0)'
                    },
                    {
                      'auto_delete' => false,
                      'boot' => false,
                      'device_name' => 'test device_name#1 data',
                      'disk_encryption_key' => {
                        'raw_key' => 'test raw_key#1 data',
                        'rsa_encrypted_key' => 'test rsa_encrypted_key#1 data',
                        'sha256' => 'test sha256#1 data'
                      },
                      'index' => 2887762520,
                      'initialize_params' => {
                        'disk_name' => 'test disk_name#1 data',
                        'disk_size_gb' => 900184319,
                        'disk_type' => 1468443832,
                        'source_image' => 1985734469
                      },
                      'source' => 'resource(disk,1)'
                    },
                    {
                      'auto_delete' => true,
                      'boot' => true,
                      'device_name' => 'test device_name#2 data',
                      'disk_encryption_key' => {
                        'raw_key' => 'test raw_key#2 data',
                        'rsa_encrypted_key' => 'test rsa_encrypted_key#2 data',
                        'sha256' => 'test sha256#2 data'
                      },
                      'index' => 4331643780,
                      'initialize_params' => {
                        'disk_name' => 'test disk_name#2 data',
                        'disk_size_gb' => 1350276479,
                        'disk_type' => 2202665748,
                        'source_image' => 2978601703
                      },
                      'source' => 'resource(disk,2)'
                    },
                    {
                      'auto_delete' => false,
                      'boot' => false,
                      'device_name' => 'test device_name#3 data',
                      'disk_encryption_key' => {
                        'raw_key' => 'test raw_key#3 data',
                        'rsa_encrypted_key' => 'test rsa_encrypted_key#3 data',
                        'sha256' => 'test sha256#3 data'
                      },
                      'index' => 5775525040,
                      'initialize_params' => {
                        'disk_name' => 'test disk_name#3 data',
                        'disk_size_gb' => 1800368639,
                        'disk_type' => 2936887664,
                        'source_image' => 3971468938
                      },
                      'source' => 'resource(disk,0)'
                    }
                  ]
                  guest_accelerators [
                    {
                      'accelerator_count' => 2697554557,
                      'accelerator_type' => 'test accelerator_type#0 data'
                    },
                    {
                      'accelerator_count' => 5395109114,
                      'accelerator_type' => 'test accelerator_type#1 data'
                    },
                    {
                      'accelerator_count' => 8092663672,
                      'accelerator_type' => 'test accelerator_type#2 data'
                    },
                    {
                      'accelerator_count' => 10790218229,
                      'accelerator_type' => 'test accelerator_type#3 data'
                    }
                  ]
                  i_label 'test name#0 data'
                  label_fingerprint 'test label_fingerprint#0 data'
                  machine_type 'test machine_type#0 data'
                  min_cpu_platform 'test min_cpu_platform#0 data'
                  network_interfaces [
                    {
                      'name' => 'test name#0 data',
                      'network' => 'resource(network,0)',
                      'network_ip' => 'test network_ip#0 data',
                      'subnetwork' => 'test subnetwork#0 data'
                    },
                    {
                      'name' => 'test name#1 data',
                      'network' => 'resource(network,1)',
                      'network_ip' => 'test network_ip#1 data',
                      'subnetwork' => 'test subnetwork#1 data'
                    }
                  ]
                  scheduling({
                    'automatic_restart' => true,
                    'on_host_maintenance' => 'test on_host_maintenance#0 data',
                    'preemptible' => true
                  })
                  service_accounts [
                    {
                      'email' => true,
                      'scopes' => ['rr', 'ss', 'tt', 'uu', 'vv']
                    },
                    {
                      'email' => false,
                      'scopes' => ['ll', 'mm', 'nn', 'oo', 'pp']
                    },
                    {
                      'email' => true,
                      'scopes' => ['ee', 'ff', 'gg', 'hh']
                    }
                  ]
                  tags({
                    'fingerprint' => 'test fingerprint#0 data',
                    'items' => ['hh', 'ii', 'jj']
                  })
                  zone 'test zone#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gcompute_instance, 'title0')
          end

          it 'should run test correctly' do
            expect(chef_run).to create(:gcompute_instance,
                                       'title0')
          end
          it { is_expected.to have_attributes(can_ip_forward: true) }

          # TODO(nelsonjr): Implement complex array object test.
          # it 'disks' do
          #   # Add test code here
          # end

          # TODO(nelsonjr): Implement complex array object test.
          # it 'guestAccelerators' do
          #   # Add test code here
          # end

          it do
            is_expected
              .to have_attributes(
                label_fingerprint: 'test label_fingerprint#0 data'
              )
          end

          it do
            is_expected
              .to have_attributes(machine_type: 'test machine_type#0 data')
          end

          it do
            is_expected
              .to have_attributes(
                min_cpu_platform: 'test min_cpu_platform#0 data'
              )
          end

          it { is_expected.to have_attributes(i_label: 'test name#0 data') }

          # TODO(nelsonjr): Implement complex array object test.
          # it 'networkInterfaces' do
          #   # Add test code here
          # end

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'scheduling' do
          #   # Add test code here
          # end

          # TODO(nelsonjr): Implement complex array object test.
          # it 'serviceAccounts' do
          #   # Add test code here
          # end

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'tags' do
          #   # Add test code here
          # end

          it { is_expected.to have_attributes(zone: 'test zone#0 data') }
        end

        # Ensure present: resource missing, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end
  end

  context 'ensure == absent' do
    context 'resource missing' do
      # Ensure absent: resource missing, ignore, no name
      context 'title == name' do
        # Ensure absent: resource missing, ignore, no name, pass
        context 'title == name (pass)' do
          before do
            expect_network_get_failed 1, name: 'title0'
          end

          let(:runner) do
            # Second path runs first - gets dummy gauth cookbook
            # First path guarantees that this cookbook will be loaded
            cookbook_paths = [File.join(File.dirname(__FILE__), '..', '..'),
                              File.join(File.dirname(__FILE__), 'cookbooks')]
            ChefSpec::SoloRunner.new(
              step_into: %w[gcompute_instance gcompute_disk gcompute_network],
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gcompute_instance 'title0' do
                  action :delete
                  zone 'test zone#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gcompute_instance, 'title0')
          end
        end

        # Ensure absent: resource missing, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure absent: resource missing, ignore, has name
      context 'title != name' do
        # Ensure absent: resource missing, ignore, has name, pass
        context 'title != name (pass)' do
          before do
            expect_network_get_failed 1
          end

          let(:runner) do
            # Second path runs first - gets dummy gauth cookbook
            # First path guarantees that this cookbook will be loaded
            cookbook_paths = [File.join(File.dirname(__FILE__), '..', '..'),
                              File.join(File.dirname(__FILE__), 'cookbooks')]
            ChefSpec::SoloRunner.new(
              step_into: %w[gcompute_instance gcompute_disk gcompute_network],
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gcompute_instance 'title0' do
                  action :delete
                  i_label 'test name#0 data'
                  zone 'test zone#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gcompute_instance, 'title0')
          end
        end

        # Ensure absent: resource missing, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end

    context 'resource exists' do
      # Ensure absent: resource exists, ignore, no name
      context 'title == name' do
        # Ensure absent: resource exists, ignore, no name, pass
        context 'title == name (pass)' do
          before do
            expect_network_get_success 1, name: 'title0'
            expect_network_delete 1, 'title0'
            expect_network_get_async 1, name: 'title0'
          end

          let(:runner) do
            cookbook_paths = [File.join(File.dirname(__FILE__), '..', '..'),
                              File.join(File.dirname(__FILE__), 'cookbooks')]
            ChefSpec::SoloRunner.new(
              step_into: %w[gcompute_instance gcompute_disk gcompute_network],
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gcompute_instance 'title0' do
                  action :delete
                  zone 'test zone#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gcompute_instance, 'title0')
          end

          it 'should run test correctly' do
            expect(chef_run).to delete(:gcompute_instance,
                                       'title0')
          end
        end

        # Ensure absent: resource exists, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
      # Ensure absent: resource exists, ignore, has name
      context 'title != name' do
        # Ensure absent: resource exists, ignore, has name, pass
        context 'title != name (pass)' do
          before do
            expect_network_get_success 1
            expect_network_delete 1
            expect_network_get_async 1
          end

          let(:runner) do
            cookbook_paths = [File.join(File.dirname(__FILE__), '..', '..'),
                              File.join(File.dirname(__FILE__), 'cookbooks')]
            ChefSpec::SoloRunner.new(
              step_into: %w[gcompute_instance gcompute_disk gcompute_network],
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gcompute_instance 'title0' do
                  action :delete
                  i_label 'test name#0 data'
                  zone 'test zone#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gcompute_instance, 'title0')
          end

          it 'should run test correctly' do
            expect(chef_run).to delete(:gcompute_instance,
                                       'title0')
          end
        end

        # Ensure absent: resource exists, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end
  end

  def expand_variables(template, data, extra_data = {})
    Google::GCOMPUTE::Instance
      .action_class.expand_variables(template, data, extra_data)
  end

  def expect_network_get_success(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result("success#{id}~#{id_data}.yaml").to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{self_link(uri_data(id).merge(data))}"
    expect(Google::Compute::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def http_success(body)
    response = Net::HTTPOK.new(1.0, 200, 'OK')
    response.body = body
    response.instance_variable_set(:@read, true)
    response
  end

  def expect_network_get_async(id, data = {})
    body = { kind: 'compute#instance' }.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! #{self_link(uri_data(id).merge(data))}"
    expect(Google::Compute::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET <async> #{args}"
      request
    end
  end

  def expect_network_get_failed(id, data = {})
    request = double('request')
    allow(request).to receive(:send).and_return(http_failed_object_missing)

    debug_network "!! #{self_link(uri_data(id).merge(data))}"
    expect(Google::Compute::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET [failed] #{args}"
      request
    end
  end

  def http_failed_object_missing
    Net::HTTPNotFound.new(1.0, 404, 'Not Found')
  end

  def expect_network_create(id, expected_body, data = {})
    merged_uri = uri_data(id).merge(data)
    body = { kind: 'compute#operation',
             status: 'DONE', targetLink: self_link(merged_uri) }.to_json

    # Remove refs that are also part of the body
    expected_body = Hash[expected_body.map do |k, v|
      [k.is_a?(Symbol) ? k.id2name : k, v]
    end]

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! POST #{collection(merged_uri)}"
    expect(Google::Compute::Network::Post).to receive(:new)
      .with(collection(merged_uri), instance_of(Google::FakeAuthorization),
            'application/json', expected_body.to_json) do |args|
      debug_network ">> POST #{args} = body(#{body})"
      request
    end
  end

  def expect_network_delete(id, name = nil, data = {})
    delete_data = uri_data(id).merge(data)
    delete_data[:name] = name unless name.nil?
    body = { kind: 'compute#operation',
             status: 'DONE',
             targetLink: self_link(delete_data) }.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! DELETE #{self_link(delete_data)}"
    expect(Google::Compute::Network::Delete).to receive(:new)
      .with(self_link(delete_data),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> DELETE #{args}"
      request
    end
  end

  def load_network_result(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gcompute_instance', file)
    debug("Loading result file: #{results}")
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  def expect_network_get_success_disk(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result_disk("success#{id}~" \
                                                           "#{id_data}.yaml")
           .to_json
    uri = uri_data_disk(id).merge(data)

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{uri}"
    expect(Google::Compute::Network::Get).to receive(:new)
      .with(self_link_disk(uri),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def load_network_result_disk(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gcompute_disk', file)
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  # Creates variable test data to comply with self_link URI parameters
  # Only used for gcompute_disk objects
  def uri_data_disk(id)
    {
      project: GoogleTests::Constants::D_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::D_PROJECT_DATA.size],
      zone: GoogleTests::Constants::D_ZONE_DATA[(id - 1) \
        % GoogleTests::Constants::D_ZONE_DATA.size],
      name: GoogleTests::Constants::D_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::D_NAME_DATA.size]
    }
  end

  def self_link_disk(data)
    URI.join(
      'https://www.googleapis.com/compute/v1/',
      expand_variables_disk(
        'projects/{{project}}/zones/{{zone}}/disks/{{name}}',
        data
      )
    )
  end

  def expect_network_get_success_network(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result_network("success#{id}~" \
                                                           "#{id_data}.yaml")
           .to_json
    uri = uri_data_network(id).merge(data)

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{uri}"
    expect(Google::Compute::Network::Get).to receive(:new)
      .with(self_link_network(uri),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def load_network_result_network(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gcompute_network', file)
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  # Creates variable test data to comply with self_link URI parameters
  # Only used for gcompute_network objects
  def uri_data_network(id)
    {
      project: GoogleTests::Constants::N_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::N_PROJECT_DATA.size],
      name: GoogleTests::Constants::N_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::N_NAME_DATA.size]
    }
  end

  def self_link_network(data)
    URI.join(
      'https://www.googleapis.com/compute/v1/',
      expand_variables_network(
        'projects/{{project}}/global/networks/{{name}}',
        data
      )
    )
  end

  def debug(message)
    puts(message) if ENV['RSPEC_DEBUG']
  end

  def debug_network(message)
    puts("Network #{message}") \
      if ENV['RSPEC_DEBUG'] || ENV['RSPEC_HTTP_VERBOSE']
  end

  def expand_variables_disk(template, data, ext_dat = {})
    Google::GCOMPUTE::Disk
      .action_class.expand_variables(template, data, ext_dat)
  end

  def expand_variables_network(template, data, ext_dat = {})
    Google::GCOMPUTE::Network
      .action_class.expand_variables(template, data, ext_dat)
  end

  def collection(data)
    URI.join(
      'https://www.googleapis.com/compute/v1/',
      expand_variables(
        'projects/{{project}}/zones/{{zone}}/instances',
        data
      )
    )
  end

  def self_link(data)
    URI.join(
      'https://www.googleapis.com/compute/v1/',
      expand_variables(
        'projects/{{project}}/zones/{{zone}}/instances/{{name}}',
        data
      )
    )
  end

  # Creates variable test data to comply with self_link URI parameters
  def uri_data(id)
    {
      project: GoogleTests::Constants::I_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::I_PROJECT_DATA.size],
      zone: GoogleTests::Constants::I_ZONE_DATA[(id - 1) \
        % GoogleTests::Constants::I_ZONE_DATA.size],
      name: GoogleTests::Constants::I_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::I_NAME_DATA.size]
    }
  end

  def build_cred
    <<-CRED
    gauth_credential 'mycred' do
      action :serviceaccount
      path '/home'
      scopes [
        'test_path'
      ]
    end
    CRED
  end

  # Creates a test recipe file and runs a block before destroying the file
  def apply_recipe(recipe)
    # Creates a random string name
    recipe_name = "recipe~test~#{(0...8).map { (65 + rand(26)).chr }.join}"
    recipe_loc = File.join(File.dirname(__FILE__), '..', 'recipes',
                           "#{recipe_name}.rb")

    File.open(recipe_loc, 'w') do |file|
      file.write([build_cred, recipe].join("\n"))
    end
    recipe_path = "gcompute::#{recipe_name}"
    begin
      yield recipe_path
    ensure
      File.delete(recipe_loc)
    end
  end
end
